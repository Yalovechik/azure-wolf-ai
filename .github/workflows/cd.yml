name: cd

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/src/terraform/**"
      - ".github/workflows/src/Python/**"
      - ".github/workflows/**"

env:
  TERRAFORM_WORKING_DIRECTORY: ".github/workflows/src/terraform"
  PYTHON_WORKING_DIRECTORY: ".github/workflows/src/Python"
  PREFIX: "woof-ai"
  ENVIRONMENT: "dev"
  PYTHON_VERSION: "3.9"
  AZURE_FUNCTIONAPP_NAME: "woof-ai-dev"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Action
        uses: actions/checkout@v3

      - name: Set up Python ENV
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Resolve Project Dependencies Using Pip
        shell: bash
        run: |
          pushd './${{ env.PYTHON_WORKING_DIRECTORY }}'
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Azure Functions Action
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ${{ env.PYTHON_WORKING_DIRECTORY }}
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
          # scm-do-build-during-deployment: true
          # enable-oryx-build: true

      - name: Generate Deployment Package
        run: |
          zip -r deployment.zip ./
        working-directory: ${{ env.PYTHON_WORKING_DIRECTORY }}

      - name: Upload Deployment Package
        uses: actions/upload-artifact@v2
        with:
          name: function-deployment
          path: ${{ env.PYTHON_WORKING_DIRECTORY }}/deployment.zip

  terraform:
    runs-on: ubuntu-latest
    outputs:
      resource_group_name: ${{ steps.apply.outputs.resource_group_name }}
      function_name: ${{ steps.apply.outputs.function_name }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5
          terraform_wrapper: false

      - id: apply
        name: Terraform Apply
        env:
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
          BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
          BACKEND_STORAGE_CONTAINER_NAME: ${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}
          TF_BACKEND_KEY: ${{ env.PREFIX }}-${{ env.ENVIRONMENT }}
          TV_VAR_prefix: ${{ env.PREFIX }}
          TV_VAR_environment: ${{ env.ENVIRONMENT }}
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          terraform init \
            -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
            -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME" \
            -backend-config="key=$TF_BACKEND_KEY"
          terraform apply --auto-approve

          resource_group_name=$(terraform output -raw resource_group_name)
          echo $resource_group_name
          echo "resource_group_name=$resource_group_name" >> "GITHUB_OUTPUT"

          function_name=$(terraform output -raw function_name)
          echo $function_name
          echo "function_name=$function_name" >> "GITHUB_OUTPUT"

  deploy:
    needs: [terraform, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: function-deployment

      - name: Clear azure session
        run: |
          az account clear
          sleep 10

      - name: Deploy
        env:
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_group_name }}
          FUNCTION_NAME: ${{ needs.terraform.outputs.function_name }}
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p=$ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az account set -s $ARM_SUBSCRIPTION_ID
          az functionapp deployment source config-zip --resource-group woof-ai-dev --name woof-ai-dev --src ./deployment.zip
